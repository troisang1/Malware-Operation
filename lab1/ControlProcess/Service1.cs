using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using System.IO;
using System.Threading;

namespace ControlProcess
{
    public partial class Service1 : ServiceBase
    {
        System.Timers.Timer timer = new System.Timers.Timer();
        public Service1()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            WriteToFile("Service is started at " + DateTime.Now);
            CheckProcess();
            
            timer.Elapsed += new ElapsedEventHandler(OnElapsedTime);
            timer.Interval = 15000; //number in milisecinds
            timer.Enabled = true;
        }

        protected override void OnStop()
        {
            WriteToFile("Service is stopped at " + DateTime.Now);
        }
        public void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            if (CheckProcess()==1) {
                return;
            }
            WriteToFile("Open new process notepad");
            var process = new Process();
            process.StartInfo.FileName = "notepad.exe";
            process.StartInfo.Arguments = "D:\\Tailieu\\UIT\\CCHDCMD\\lab1\\ControlProcess\\bin\\Release\\LOL.txt";
            process.Start();

        }
        public int  CheckProcess()
        {
            Process[] localByName = Process.GetProcessesByName("notepad");
            if (localByName.Length > 0)
            {
                WriteToFile("Processes is running, kill it now");
                for (int i = 0; i < localByName.Length; i++)
                {
                    localByName[i].Kill();
                }
                return 1;
            }
            else
            {
                WriteToFile("Process is NOT running. Open new process every 30s");
            }
            return 0;
        }
        public void WriteToFile(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory +
           "\\Logs\\ServiceProcessLog_" + DateTime.Now.Date.ToShortDateString().Replace('/', '_') +
           ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to.
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }
    }
}
